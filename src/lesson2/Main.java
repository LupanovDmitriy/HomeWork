package lesson2;

import com.sun.deploy.security.SelectableSecurityManager;
import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;

import java.sql.Array;
import java.util.Arrays;

public class Main {
    //1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
//    С помощью цикла и условия заменить 0 на 1, 1 на 0;
    public static void main(String[] args) {
        int[] arri = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
        for (int i = 0; i < arri.length; i++) {
            if (arri[i] == 1) {
                arri[i] = 0;
            } else {
                arri[i] = 1;
            }
        }
        System.out.println(Arrays.toString(arri));

        //int[] arr = {1, 2, 3, 4,5,6,7,8,9};
        //System.out.println(Arrays.toString(arr));
        //System.out.println(Arrays.toString(method7(arr, 2)));
        //System.out.println(Arrays.toString(method7(arr, -3)));

    }

    //2. Задать пустой целочисленный массив размером 8.
//    С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
    public static void method2() {
        int[] arr = new int[8];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = i * 3;
        }
    }


    //3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по
//    нему циклом, и числа меньшие 6 умножить на 2;
    public static void method3() {
        int[] arr = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 6) {
                arr[i] *= 2;
            }
        }
    }

    //4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
//    и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
    public static void method4() {
        int[][] arr = new int[5][5];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (i == j || i + j == arr[i].length - 1) {
                    arr[i][j] = 1;
                }
            }
        }
    }


    //5. ** Задать одномерный массив и найти в нем минимальный
//    и максимальный элементы (без помощи интернета);
    public static void method5() {
        int[] arr = {5, 56, 48, 48, 96, 87, 97, 97, 94, 3, 2, 4, 77, 7};
        int mini = arr[0];
        int maxi = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < mini) {
                mini = arr[i];
            }
            if (arr[i] > maxi) {
                maxi = arr[i];
            }
        }
    }

    //6. ** Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true,
//    если в массиве есть место, в котором сумма левой и правой части массива равны.
//        Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,
//    граница показана символами ||, эти символы в массив не входят.
    public static boolean method6(int[] arr) {
        int sumLeft = 0;
        int sumRight = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            sumLeft += arr[i];
            sumRight = 0;
            for (int j = i + 1; j < arr.length; j++) {
                sumRight += arr[j];
            }
            if (sumLeft == sumRight) {
                return true;
            }
        }
        return false;
    }


    //7. **** Написать метод, которому на вход подается одномерный массив и число
//    n (может быть положительным, или отрицательным), при этом метод должен сместить все элементы
//    массива на n позиций. Для усложнения задачи нельзя
//    пользоваться вспомогательными массивами.
//
    public static int[] method7(int[] arr, int n) {

        int memoryInt = 0;
        /*
        По условиям задачи мы должны сдвигать массив на несколько позиций, и при любом сдвиге мы затираем предыдущее значение элемента.
        Нам это значение в любом случае нужно сохранять. Создаем переменную memoryInt в которой как раз и будем хранить затираемое значение.
         */
        int k = Math.abs(n);
        /*
        так как в случаее |n|>1 нам понядобится |n| переменных для хранения затираемых значений. чтоб использовать только 1 переменную
        то мы делаем цикл |n| раз, где в каждом мы сдвигаем масиив только на одну позиции влево или в право(в зависимости от знака). но делаем это n раз
         */
        for (int i = 1; i <= k; i++) {
            /*
            У нас два варианта либо мы двигаем на 1 позицию влево или вправо.
            Это означет что мы должны в текущую позицию записывать значение соседней позиции.
            Чтоб не вычислять индекс соседа с учетом переполнения индекса было принято не считать индекс а сделать две
            ветки в зависимости от направления движения
             */
            if (n >= 0) {
                memoryInt = arr[0];//первым перезапишется 0 индекс в массиве, его и сохраняем
                for (int j = 0; j < arr.length - 1; j++) { //бежим от начала к концу масиива и сдвигаем его на 1 позицию
                    arr[j] = arr[j + 1];//не высчитываем индекс и не правиряем переполнения, так как это предусмотрели в условииях цикла
                }
                arr[arr.length - 1] = memoryInt; //в последний элемент записываем сохраненое ранее значение
            } else {
                memoryInt = arr[arr.length - 1];//первым перезапишется последний индекс в массиве, его и сохраняем
                for (int j =  arr.length-1 ; j >0 ; j--) {//бежим от конца массива к началу
                    arr[j] = arr[j - 1];
                }
                arr[0] = memoryInt;//в 0 индекс записываемсохраненое значение
            }
        }
        return arr;//возвращаем изменный массив
    }
}
